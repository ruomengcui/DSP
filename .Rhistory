?head
?sample
sample.int(20, size = 2, replace = T)
sample.int(20, size = 2, replace = T)
sample.int(20, size = 2, replace = T)
unlink(".RData")
source("m.R")
a=data.frame(x=c("a", "b", "c"), y=c("r", "y", "z"))
a
a$z=cbind(a$x, a$y)
a
a$z=paste(a$x, a$y)
a
a$z
a$z=paste(a$x, a$y, sep="")
a
options(error=utils::recover)
if(file.exists("/Volumes/d1")){
s.d1='/Volumes/d1/'
s.d3='/Volumes/d3/getA/'
} else{
s.d1='/afs/ir.stanford.edu/users/r/l/rlbray/drives/d1/'
s.d3='/data/gsb/rlbray/getA/'
.libPaths(paste(s.d1, 'code/R/R_lib', sep=""))
}
dataSource<-paste(s.d3, 'inputs/', sep="")
varSave<-paste(s.d3, 'variables/', sep="")
finalOuts<-paste(s.d3, 'outputs/', sep="")
global.sed.folder<-paste(s.d1, 'code/R/sed_files/', sep="")
local.sed.folder<-paste(s.d1, 'code/getA/R/sed_files/', sep="")
ex.funs<-paste(s.d1, 'code/R/functions/', sep="")
ex.mods<-paste(s.d1, 'code/getA/R/modules/', sep="")
library('multicore')
library('reshape')
library('ggplot2')
library('mnormt')
library('xtable')
install.packages('xtable')
#library('xtable')
library('expm')
options(error=utils::recover)
if(file.exists("/Volumes/d1")){
s.d1='/Volumes/d1/'
s.d3='/Volumes/d3/getA/'
} else{
s.d1='/afs/ir.stanford.edu/users/r/l/rlbray/drives/d1/'
s.d3='/data/gsb/rlbray/getA/'
.libPaths(paste(s.d1, 'code/R/R_lib', sep=""))
}
dataSource<-paste(s.d3, 'inputs/', sep="")
varSave<-paste(s.d3, 'variables/', sep="")
finalOuts<-paste(s.d3, 'outputs/', sep="")
global.sed.folder<-paste(s.d1, 'code/R/sed_files/', sep="")
local.sed.folder<-paste(s.d1, 'code/getA/R/sed_files/', sep="")
ex.funs<-paste(s.d1, 'code/R/functions/', sep="")
ex.mods<-paste(s.d1, 'code/getA/R/modules/', sep="")
library('multicore')
library('reshape')
library('ggplot2')
library('mnormt')
#library('xtable')
library('expm')
library('MASS')
library('numDeriv')
library('BB')
library('bayesm')
my.funs=dir(ex.funs)
for(i in seq(my.funs)) source(paste(ex.funs, my.funs[i], sep=""))
my.mods=dir(ex.mods)
for(i in seq(my.mods)) source(paste(ex.mods, my.mods[i], sep=""))
options(error=utils::recover)
if(file.exists("/Volumes/d1")){
s.d1='/Volumes/d1/'
s.d3='/Volumes/d3/getA/'
} else{
s.d1='/afs/ir.stanford.edu/users/r/l/rlbray/drives/d1/'
s.d3='/data/gsb/rlbray/getA/'
.libPaths(paste(s.d1, 'code/R/R_lib', sep=""))
}
dataSource<-paste(s.d3, 'inputs/', sep="")
varSave<-paste(s.d3, 'variables/', sep="")
finalOuts<-paste(s.d3, 'outputs/', sep="")
global.sed.folder<-paste(s.d1, 'code/R/sed_files/', sep="")
local.sed.folder<-paste(s.d1, 'code/getA/R/sed_files/', sep="")
ex.funs<-paste(s.d1, 'code/R/functions/', sep="")
ex.mods<-paste(s.d1, 'code/getA/R/modules/', sep="")
library('multicore')
library('reshape')
library('ggplot2')
library('mnormt')
library('expm')
library('MASS')
library('numDeriv')
library('BB')
library('bayesm')
my.funs=dir(ex.funs)
for(i in seq(my.funs)) source(paste(ex.funs, my.funs[i], sep=""))
my.mods=dir(ex.mods)
for(i in seq(my.mods)) source(paste(ex.mods, my.mods[i], sep=""))
mc=1
#Monte Carlo
if(mc) run.monte.carlo()
ls()
trails
trials
graph.name
ls
ls()
ls()
ls()
x
x
plot.mc(trials, 'simGraph')
trials=c(1, 10, 100)
plot.mc(trials, 'simGraph')
mc=1
#Monte Carlo
if(mc) run.monte.carlo()
if(mc) run.monte.carlo()
trials=c(100, 500, 2500)
h=list(a=c(1, 2), b=(1, 1), which.a=c(2, 3))
h=list(a=c(1, 2), b=c(1, 1), which.a=c(2, 3))
h$which.a
h$which.b
h$which.b==NA
h$which.b==NULL
is.na(h$which.b)
is.null(h$which.b)
is.null(h$which.a)
h$which.b=seq(h$b)-1
h
make.S(H, which.alpha[n])
make.S<-function(H, j){
((diag(H+1+j)-makeD(H+1+j,1))%^%j)[,seq(H+1)]
}
H=6
make.S(H, 0)
library('multicore')
library('reshape')
library('ggplot2')
library('mnormt')
library('expm')
library('MASS')
library('numDeriv')
library('BB')
library('bayesm')
fix(make.S)
make.S(H, 0)
makeC <- function(N){
C=matrix(0, N, N)
C[lower.tri(C, diag = TRUE)] <-1
C
}
makeD <- function(N, L){
x=rbind(matrix(0, abs(L), N), diag(1, N-abs(L), N))
if(L>=0) x
else t(x)
}
makeK<-function(H, L){
o=matrix(0, H+1, H+1)
o[H+1-L,]<-1
o
}
makeG<-function(H, L){
rbind(diag(H-L), rep(-1, H-L), matrix(0, L, H-L))
}
make.S<-function(H, j){
((diag(H+1+j)-makeD(H+1+j,1))%^%j)[,seq(H+1)]
}
makeIj <- function(H, L){diag(c(array(1,L),array(0,H-L)))}
makeR <- function(H, L){R=t(makeD(H, L)); R[1,seq(L)]=1; R}
make.el<-function(H, l){ x=rep(0, H); x[l]=1; x}
make.S(H, 0)
makeIj(H+1,which.beta[n]+1)
makeIj(H, 1)
which.alpha=1
beta=exp(log.alpha.beta[(num.alpha+1):length(log.alpha.beta)])
log.alpha.beta=c(1,2,3,4,5)
num.alpha=2
beta=exp(log.alpha.beta[(num.alpha+1):length(log.alpha.beta)])
beta
log.alpha.beta=log(c(1,2,3,4,5))
beta=exp(log.alpha.beta[(num.alpha+1):length(log.alpha.beta)])
beta
alpha=exp(log.alpha.beta[seq(num.alpha)])
alpha
rm(which.alpha)
rm(which.beta)
rm(alpha)
rm(beta)
alpha
rm(alpha)
search()
unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
library('plyr')
which.alpha=c(1, 4, 5)
which.beta=c(95, 98)
unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
class(unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y))))))
class(c(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y))))))
class(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
str(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
str(unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y))))))
str(unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))), recursive=T))
unlist(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))), recursive=T)
do.call(cbind(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y))))))
do.call(c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))), cbind)
do.call(cbind, c(llply(which.alpha, function(y) substitute(expression(alpha[x]), list(x=y))), llply(which.beta, function(y) substitute(expression(beta[x]), list(x=y)))))
