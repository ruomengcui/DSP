get.fourier.matrix<-function(N){#
	i=complex(real=0, imaginary=1)#
	w=exp(-2*pi*i/N)#
	N^(-1/2)*sapply(seq(N)-1, function(x) (w^(seq(N)-1))^x)#
}
get.fourier.matrix(10)
W=get.fourier.matrix(10)
l=2; plot(Re(W[,l]))
l=2; plot(Im(W[,l]))
l=2; plot(Im(W[,l]), Re(W[,l]))
l=3; plot(Im(W[,l]), Re(W[,l]))
l=4; plot(Im(W[,l]), Re(W[,l]))
W=get.fourier.matrix(20)
l=2; plot(Im(W[,l]), Re(W[,l]))
l=3; plot(Im(W[,l]), Re(W[,l]))
l=4; plot(Im(W[,l]), Re(W[,l]))
l=4; plot(Re(W[,l]))
l=3; plot(Re(W[,l]))
l=4; plot(Re(W[,l]))
l=4; plot(Im(W[,l]))
l=5; plot(Im(W[,l]), Re(W[,l]))
l=6; plot(Im(W[,l]), Re(W[,l]))
l=7; plot(Im(W[,l]), Re(W[,l]))
l=11; plot(Im(W[,l]), Re(W[,l]))
l=10; plot(Im(W[,l]), Re(W[,l]))
l=9; plot(Im(W[,l]), Re(W[,l]))
W[,l]
l=9; plot(Re(W[,l]), Im(W[,l]))
l=10; plot(Re(W[,l]), Im(W[,l]))
l=10; plot(Re(W[,l]))
l=10; plot(Im(W[,l]))
l=11; plot(Re(W[,l]), Im(W[,l]))
18
l=18; plot(Re(W[,l]), Im(W[,l]))
Re(W[,l]
)
l=18; plot(Re(W[,l]))
l=19; plot(Re(W[,l]))
l=1; plot(Re(W[,l]))
l=2; plot(Re(W[,l]))
l=19; plot(Re(W[,l]))
l=20; plot(Re(W[,l]))
l=2; plot(Re(W[,l]))
l=2; plot(Im(W[,l]))
l=20; plot(Im(W[,l]))
a=Re(W[,l])
plot(a)
W%*%a
a=Im(W[,l])*sqrt(-1)
a=Im(W[,l])*complex(im=1)
a
plot(a)
a=Im(W[,l])*complex(re=0, im=1)
a=Im(W[,l])
plot(a)
W%*%a
b=Re(W[,l])
plot(2*b+a)
plot(2*b)
plot(2*b-a)
plot(b-a)
plot(b)
plot(a)
plot(b-a)
plot(2*b-a)
plot(10*b-a)
plot(2*b-a)
plot(b-a)
W%*%(b-a)
v=W%*%(b-a); v%*%t(Conj(v))
v=W%*%(b-a); v%*%Conj(v)
v=W%*%(b-a); v*Conj(v)
v=W%*%(b-a); zapsmall(v*Conj(v))
v=W%*%(b); zapsmall(v*Conj(v))
v=W%*%(2*b-a); zapsmall(v*Conj(v))
v=W%*%(2*b+a); zapsmall(v*Conj(v))
v=W%*%(2*b); zapsmall(v*Conj(v))
v=W%*%(a); zapsmall(v*Conj(v))
W%*%(a)
zapsmall(W%*%(a))
zapsmall(W%*%(b))
a
b=Re(W[,l])
plot(b)
b=Re(W[,2])+Im(W[,2])
a=Re(W[,20])+Im(W[,20])
plot(b)
plot(a)
plot(b*a)
sum(plot(b*a))
plot(a)
W%*%a
v=W%*%(a); zapsmall(v*Conj(v))
W
W=get.fourier.matrix(6)
W%*%c(1, 0,0,0,1,0)
v=W%*%c(1, 0,0,0,1,0); v*Conj(v)
v=W%*%c(1, 0,0,0,1,0); plot(v*Conj(v))
v=W%*%c(1, 0,0,0,1,0); plot(v*Conj(v))
v=W%*%c(1, 0,0,0,1,0); plot(Re(v*Conj(v)))
v=W%*%c(0, 0,0,0,1,0); plot(Re(v*Conj(v)))
v=W%*%c(0, 0,0,0,1,0); (v*Conj(v))
v=W%*%c(2, 0,0,0,1,0); (v*Conj(v))
v=W%*%c(2, 0,0,0,0,0); (v*Conj(v))
v=W%*%c(2, 0,0,0,.5,0); (v*Conj(v))
v=W%*%c(2, 0,0,0,.5,0); plot((v*Conj(v)))
v=W%*%c(2, 0,0,0,.5,0); plot(Re(v*Conj(v)))
v=W%*%c(20, 0,0,0,.5,0); plot(Re(v*Conj(v)))
v=W%*%c(20, 0,0,0,.5,0); (v*Conj(v))
v=W%*%c(20, 0,0,0,.5,0); plot(Re(v*Conj(v)))
v=W%*%c(2, 0,0,0,0,1); plot(Re(v*Conj(v)))
D
makeC <- function(n){#
	C=matrix(0, n, n)#
	C[lower.tri(C, diag = TRUE)] <-1#
	C#
}#
#
makeD <- function(n, L){#
	D=matrix(0, n, n)#
	D[seq(L+1,n^2-n*L,n+1)]<-1#
	D#
}
D=makeD(6, 1)
C=makeC(6)
D
C%*%D
D%*%C
D
D%*%D%*%C
C%*%D%*%D
make.el<-function(n, l) x=rep(0, n); x[l]=1; x
function(n, l) x=rep(0, n); x[l]=1; x
function(n, l) x=rep(0, n); x[l]=1; x
make.el<-function(n, l){ x=rep(0, n); x[l]=1; x}
make.el(6, 3)
el=make.el(6, 3)
el%*%D
el=make.el(6, 2)
el
el=make.el(6, 3)
el%*%D%*%D
el%*%D%*%D%*%D
W
C%*%W
C%*%W
round(C%*%W,2)
el%*%C
el
el%*%W
W%*%el
source("fourier.R")
source("fourier.R")
dim(E)
getA <- function(gamma, L=0){#
	#the first element in gamma is gamma_p, and the remaining are gamma_j#
	n=length(gamma)-1#
	C=makeC(n)#
	D=makeD(n, L)#
	sumCIC=matrix(0, n,n)#
	for(j in 1:n){#
		Ij=makeIj(j,n)#
		sumCIC=sumCIC+gamma[j+1]*t(C)%*%Ij%*%C#
	}#
	toInvert=pmin(t(D)%*%t(C)%*%C%*%D+gamma[1]*diag(n)+sumCIC, 10^12)#
	solve(toInvert,t(D)%*%t(C)%*%C)#
}
A=getA(c(1,1,0,0,0,0,0), 1)
library('numDeriv')#
library('BB')#
#
getA <- function(gamma, L=0){#
	#the first element in gamma is gamma_p, and the remaining are gamma_j#
	n=length(gamma)-1#
	C=makeC(n)#
	D=makeD(n, L)#
	sumCIC=matrix(0, n,n)#
	for(j in 1:n){#
		Ij=makeIj(j,n)#
		sumCIC=sumCIC+gamma[j+1]*t(C)%*%Ij%*%C#
	}#
	toInvert=pmin(t(D)%*%t(C)%*%C%*%D+gamma[1]*diag(n)+sumCIC, 10^12)#
	solve(toInvert,t(D)%*%t(C)%*%C)#
}#
#
makeC <- function(n){#
	C=matrix(0, n, n)#
	C[lower.tri(C, diag = TRUE)] <-1#
	C#
}#
#
makeD <- function(n, L){#
	D=matrix(0, n, n)#
	D[seq(L+1,n^2-n*L,n+1)]<-1#
	D#
}#
#
makeIj <- function(j, n){diag(c(array(1,j),array(0,n-j)))}#
#
makeR <- function(n, j){R=t(makeD(n, j)); R[1,seq(j)]=1; R}#
#
make.el<-function(n, l){ x=rep(0, n); x[l]=1; x}#
#
getGamma<-function(A, S, Lambda, k, L){#
#the first element is gamma_i, the second is gamma_p, and the remaining are gamma_c^j.#
	iota = c(1,k)/getStdDiv(A, S, Lambda, L)#
	iota[2:length(iota)]/iota[1]#
}#
#
getStdDiv<-function(A, S, Lambda, L){#
#the first element is the standard deviation of inventory, the second is the standard deviation of production, and the remaining are the standard deviation of the supplier's inventories.#
	n=dim(A)[1]#
	C=makeC(n)#
	D=makeD(n, L)#
	std = array(0,n+1)#
	std[1] = sqrt(sum(diag(C%*%(D%*%A-diag(n))%*%S%*%t(D%*%A-diag(n))%*%t(C)+C%*%D%*%Lambda%*%t(D)%*%t(C))))#
	std[2] =sqrt(sum(diag(A%*%S%*%t(A)+Lambda)))#
	for(j in 1:n){#
		Ij=makeIj(j,n)#
		std[j+2] =sqrt(sum(diag(Ij%*%C%*%(A%*%S%*%t(A)+Lambda)%*%t(C)%*%Ij)))#
	} #
	std#
}#
#
calcObjective<-function(A, S, Lambda, k, L){	#
#k_i is normalized to 1; the first element of k is k_p, and the remaining are theta^j*k_c^{j-1}.#
	A=matrix(A, sqrt(length(A)), sqrt(length(A)))#
	sum(c(1,k)*getStdDiv(A, S, Lambda, L))	#
}#
#
rawOptimization<-function(k, S=diag(length(k)-1), Lambda=diag(length(k)-1), L, startA=c(diag(length(k)-1))/2){#
	o=optim(startA, calcObjective, gr = NULL, S, k, L, method = "BFGS", control = list(maxit=5000))#
	o$A=matrix(o$par,sqrt(length(o$par)),sqrt(length(o$par)))#
	o#
}#
#
solve.for.A<-function(k, S=diag(length(k)-1), Lambda=diag(length(k)-1), L=0){#
	fixedPointError<-function(A, S, k, L){#
		A=matrix(A, sqrt(length(A)), sqrt(length(A)))#
		c(A-getA(getGamma(A, S, Lambda, k, L), L))#
	}#
	o=BBsolve(c(diag(length(k)-1))/2, fixedPointError, method=c(2,3,1), control=list(), quiet=FALSE, S, k, L)#
	o$A=matrix(o$par,sqrt(length(o$par)),sqrt(length(o$par)))#
	o#
}#
#
checkFixedPoint<-function(k, S=diag(length(k)-1), Lambda=diag(length(k)-1), L=0){#
#first solve fixed point, then optimize from that fixed point to see if I can do any better#
	o1=solve.for.A(k, S, Lambda, L)#
	o2=rawOptimization(k, S, Lambda, L, o1$par)#
	list(o1$A, sum(o1$A-o2$A))#
}
A=getA(c(1,1,0,0,0,0,0), 1)
A
